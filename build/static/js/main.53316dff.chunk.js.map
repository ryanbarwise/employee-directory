{"version":3,"sources":["logo.svg","components/THeader.js","components/TRow.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","THeader","headers","map","value","TRow","picture","name","dob","gender","email","phone","src","alt","Table","filteredEmployees","className","item","thumbnail","first","last","date","App","state","unfilteredEmployees","filterBy","event","target","innerText","toLowerCase","filter","employee","setState","fetch","then","response","json","data","results","console","log","class","type","id","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","onClick","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qKAAAA,EAAOC,QAAU,IAA0B,kC,8HCkB5BC,G,YAhBC,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAGlB,OAEI,+BAEQA,EAAQC,KAAI,SAAAC,GACZ,OAAO,4BAAKA,SCUTC,EAlBF,SAAC,GAAiD,IAA/CC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,IAAKC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,MAGnD,OAEI,4BACI,4BACI,yBAAKC,IAAKN,EAASO,IAAG,UAAKN,EAAL,aAE1B,4BAAKA,GACL,4BAAKC,GACL,4BAAKC,GACL,4BAAKC,GACL,4BAAKC,KCYEG,EAvBD,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,kBACf,OAEE,2BAAOC,UAAU,SACf,kBAAC,EAAD,CACEd,QAAS,CAAC,UAAW,OAAQ,MAAO,SAAU,QAAS,WAExDa,EAAkBZ,KAAI,SAACc,GACtB,OACE,kBAAC,EAAD,CACEX,QAASW,EAAKX,QAAQY,UACtBX,KAAI,UAAKU,EAAKV,KAAKY,MAAf,YAAwBF,EAAKV,KAAKa,MACtCZ,IAAKS,EAAKT,IAAIa,KACdZ,OAAQQ,EAAKR,OACbC,MAAOO,EAAKP,MACZC,MAAOM,EAAKN,aCsDTW,E,4MAnEbC,MAAQ,CACNC,oBAAqB,GACrBT,kBAAmB,I,EAiBrBU,SAAW,SAACC,GACV,IAAMjB,EAASiB,EAAMC,OAAOC,UAAUC,cAChCd,EAAoB,EAAKQ,MAAMC,oBAAoBM,QACvD,SAACC,GAAD,OAAcA,EAAStB,SAAWA,KAGpC,EAAKuB,SAAS,CAAEjB,uB,kEApBG,IAAD,OAClBkB,MAAM,yCACHC,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GACL,EAAKL,SAAS,CACZR,oBAAqBa,EAAKC,QAC1BvB,kBAAmBsB,EAAKC,UAE1BC,QAAQC,IAAIH,EAAKC,c,+BAgBrB,OACE,yBAAKtB,UAAU,OACb,mDAEA,yBAAKyB,MAAM,YACT,4BACEA,MAAM,oCACNC,KAAK,SACLC,GAAG,gBACHC,cAAY,WACZC,gBAAc,OACdC,gBAAc,SANhB,UAYA,yBAAKL,MAAM,gBAAgBM,kBAAgB,iBACzC,4BAAQN,MAAM,gBAAgBC,KAAK,SAASM,QAASC,KAAKxB,UAA1D,QAGA,4BAAQgB,MAAM,gBAAgBC,KAAK,SAASM,QAASC,KAAKxB,UAA1D,YASJ,kBAAC,EAAD,CAAOV,kBAAmBkC,KAAK1B,MAAMR,mBAAqB,U,GA9DhDmC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.53316dff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from  'react';\n\nconst THeader = ({headers}) => {\n    //const { headers } = props;\n    //const headers = props.headers\nreturn (\n    //Picture, Name, DOB, Gender, Email, Phone, \n    <thead>\n        {\n            headers.map(value => {\n            return <th>{value}</th>\n\n            })\n        }\n    </thead>\n)\n}\n\nexport default THeader;","import React from  'react';\n\nconst TRow = ({ picture, name, dob, gender, email, phone}) => {\n    //const { headers } = props;\n    //const headers = props.headers\nreturn (\n    // Picture, Name, DOB, Gender, Email, Phone, \n    <tr>\n        <td>\n            <img src={picture} alt={`${name} photo`}/>\n        </td>\n        <td>{name}</td>\n        <td>{dob}</td>\n        <td>{gender}</td>\n        <td>{email}</td>\n        <td>{phone}</td>\n    </tr>\n)\n}\n\nexport default TRow;","import React, { useState } from 'react';\nimport THeader from './THeader';\nimport TRow from './TRow';\n\nconst Table = ({ filteredEmployees }) => {\n  return (\n    //ID, Picture, Name, DOB, Email, Phone,\n    <table className=\"table\">\n      <THeader\n        headers={['Picture', 'Name', 'DOB', 'Gender', 'Email', 'Phone']}\n      />\n      {filteredEmployees.map((item) => {\n        return (\n          <TRow\n            picture={item.picture.thumbnail}\n            name={`${item.name.first} ${item.name.last}`}\n            dob={item.dob.date}\n            gender={item.gender}\n            email={item.email}\n            phone={item.phone}\n          />\n        );\n      })}\n    </table>\n  );\n};\n\nexport default Table;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Table from './components/Table';\n\nclass App extends Component {\n  state = {\n    unfilteredEmployees: [],\n    filteredEmployees: []\n  };\n\n  componentDidMount() {\n    fetch('https://randomuser.me/api/?results=15')\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        this.setState({\n          unfilteredEmployees: data.results, \n          filteredEmployees: data.results\n         });\n        console.log(data.results);\n      });\n  }\n\n  filterBy = (event) => {\n    const gender = event.target.innerText.toLowerCase();\n    const filteredEmployees = this.state.unfilteredEmployees.filter(\n      (employee) => employee.gender === gender\n    );\n\n    this.setState({ filteredEmployees }); //creates key, value of unfilteredEmployees //rerenders component\n  };\n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1> Employee Directory</h1>\n\n        <div class=\"dropdown\">\n          <button\n            class=\"btn btn-secondary dropdown-toggle\"\n            type=\"button\"\n            id=\"dropdownMenu2\"\n            data-toggle=\"dropdown\"\n            aria-haspopup=\"true\"\n            aria-expanded=\"false\"\n            // onClick={() => this.filterBy(\"male\")} when you need to pass an argument\n            \n          >\n            Filter\n          </button>\n          <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenu2\">\n            <button class=\"dropdown-item\" type=\"button\" onClick={this.filterBy}>\n              Male\n            </button>\n            <button class=\"dropdown-item\" type=\"button\" onClick={this.filterBy}>\n              Female\n            </button>\n            \n          </div>\n        </div>\n\n        {/* <input placeholder=\"search by name\" /> */}\n        {/* after input working, go through unfilteredEmployees to filter criteria */}\n        <Table filteredEmployees={this.state.filteredEmployees || []} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}